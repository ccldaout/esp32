diff --git a/extmod/vfs.c b/extmod/vfs.c
index 0585de1c..af31e628 100644
--- a/extmod/vfs.c
+++ b/extmod/vfs.c
@@ -131,7 +131,18 @@ mp_import_stat_t mp_vfs_import_stat(const char *path) {
     }
     #endif
     // TODO delegate to vfs.stat() method
-    return MP_IMPORT_STAT_NO_EXIST;
+
+    // $$$$
+    mp_obj_t path_out2 = mp_obj_new_str_copy(&mp_type_str, (const byte *)path_out, strlen(path_out));
+    mp_obj_t stat = mp_vfs_proxy_call(vfs, MP_QSTR_stat, 1, &path_out2);
+    mp_obj_tuple_t *t = MP_OBJ_TO_PTR(stat);
+    int mode = mp_obj_get_int(t->items[0]);
+    if ((mode & MP_S_IFDIR) != 0)
+	return MP_IMPORT_STAT_DIR;
+    else if ((mode & MP_S_IFREG) != 0)
+	return MP_IMPORT_STAT_FILE;
+    else
+	return MP_IMPORT_STAT_NO_EXIST;
 }
 
 mp_obj_t mp_vfs_mount(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
diff --git a/ports/esp32/Makefile b/ports/esp32/Makefile
index d2d6192b..cd88a822 100644
--- a/ports/esp32/Makefile
+++ b/ports/esp32/Makefile
@@ -14,8 +14,8 @@ FROZEN_MPY_DIR = modules
 # include py core make definitions
 include $(TOP)/py/py.mk
 
-PORT ?= /dev/ttyUSB0
-BAUD ?= 460800
+PORT ?= /dev/ttyS2
+BAUD ?= 115200
 FLASH_MODE ?= dio
 FLASH_FREQ ?= 40m
 FLASH_SIZE ?= 4MB
@@ -132,6 +132,7 @@ SRC_C = \
 	uart.c \
 	gccollect.c \
 	mphalport.c \
+	vterm.c \
 	fatfs_port.c \
 	help.c \
 	modutime.c \
diff --git a/ports/esp32/machine_uart.c b/ports/esp32/machine_uart.c
index 26cbc88f..41971a79 100644
--- a/ports/esp32/machine_uart.c
+++ b/ports/esp32/machine_uart.c
@@ -242,7 +242,8 @@ STATIC mp_obj_t machine_uart_make_new(const mp_obj_type_t *type, size_t n_args,
     uart_param_config(self->uart_num, &uartcfg);
 
     // RX and TX buffers are currently hardcoded at 256 bytes each (IDF minimum).
-    uart_driver_install(uart_num, 256, 256, 10, &UART_QUEUE[self->uart_num], 0);
+    //uart_driver_install(uart_num, 256, 256, 10, &UART_QUEUE[self->uart_num], 0);
+    uart_driver_install(uart_num, 256, 256, 0, NULL, 0);
 
     mp_map_t kw_args;
     mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
diff --git a/ports/esp32/main.c b/ports/esp32/main.c
index eebf183c..8893202b 100644
--- a/ports/esp32/main.c
+++ b/ports/esp32/main.c
@@ -48,6 +48,7 @@
 #include "uart.h"
 #include "modmachine.h"
 #include "mpthreadport.h"
+#include "vterm.h"
 
 // MicroPython runs as a task under FreeRTOS
 #define MP_TASK_PRIORITY        (ESP_TASK_PRIO_MIN + 1)
@@ -63,6 +64,7 @@ void mp_task(void *pvParameter) {
     mp_thread_init(&mp_task_stack[0], MP_TASK_STACK_LEN);
     #endif
     uart_init();
+    mp_vterm_init();
 
     // Allocate the uPy heap using malloc and get the largest available region
     size_t mp_task_heap_size = heap_caps_get_largest_free_block(MALLOC_CAP_8BIT);
diff --git a/ports/esp32/modsocket.c b/ports/esp32/modsocket.c
index 31d15396..5abc44d0 100644
--- a/ports/esp32/modsocket.c
+++ b/ports/esp32/modsocket.c
@@ -54,6 +54,8 @@
 #include "lwip/igmp.h"
 #include "esp_log.h"
 
+#include "vterm.h"
+
 #define SOCKET_POLL_US (100000)
 
 typedef struct _socket_obj_t {
@@ -222,6 +224,16 @@ STATIC mp_obj_t socket_setsockopt(size_t n_args, const mp_obj_t *args) {
             break;
         }
 
+        // level: IPPROTO_TCP
+        case TCP_NODELAY: {
+            int val = mp_obj_get_int(args[3]);
+            int ret = lwip_setsockopt_r(self->fd, IPPROTO_TCP, opt, &val, sizeof(int));
+            if (ret != 0) {
+                exception_from_errno(errno);
+            }
+            break;
+        }
+
         // level: IPPROTO_IP
         case IP_ADD_MEMBERSHIP: {
             mp_buffer_info_t bufinfo;
@@ -392,6 +404,13 @@ STATIC mp_obj_t socket_makefile(size_t n_args, const mp_obj_t *args) {
 }
 STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(socket_makefile_obj, 1, 3, socket_makefile);
 
+STATIC mp_obj_t socket_airterm(mp_obj_t self_in) {
+    socket_obj_t *sock = MP_OBJ_TO_PTR(self_in);
+    bool ret = mp_vterm_register_airterm(sock->fd);
+    sock->fd = -1;
+    return ret ? mp_const_true : mp_const_false;
+}
+STATIC MP_DEFINE_CONST_FUN_OBJ_1(socket_airterm_obj, socket_airterm);
 
 // XXX this can end up waiting a very long time if the content is dribbled in one character
 // at a time, as the timeout resets each time a recvfrom succeeds ... this is probably not
@@ -472,6 +491,7 @@ STATIC const mp_map_elem_t socket_locals_dict_table[] = {
     { MP_OBJ_NEW_QSTR(MP_QSTR_settimeout), (mp_obj_t)&socket_settimeout_obj },
     { MP_OBJ_NEW_QSTR(MP_QSTR_setblocking), (mp_obj_t)&socket_setblocking_obj },
     { MP_OBJ_NEW_QSTR(MP_QSTR_makefile), (mp_obj_t)&socket_makefile_obj },
+    { MP_OBJ_NEW_QSTR(MP_QSTR_airterm), (mp_obj_t)&socket_airterm_obj },
     { MP_OBJ_NEW_QSTR(MP_QSTR_fileno), (mp_obj_t)&socket_fileno_obj },
 
     { MP_OBJ_NEW_QSTR(MP_QSTR_read), (mp_obj_t)&mp_stream_read_obj },
@@ -584,6 +604,7 @@ STATIC const mp_map_elem_t mp_module_socket_globals_table[] = {
     { MP_OBJ_NEW_QSTR(MP_QSTR_SOL_SOCKET), MP_OBJ_NEW_SMALL_INT(SOL_SOCKET) },
     { MP_OBJ_NEW_QSTR(MP_QSTR_SO_REUSEADDR), MP_OBJ_NEW_SMALL_INT(SO_REUSEADDR) },
     { MP_OBJ_NEW_QSTR(MP_QSTR_IP_ADD_MEMBERSHIP), MP_OBJ_NEW_SMALL_INT(IP_ADD_MEMBERSHIP) },
+    { MP_OBJ_NEW_QSTR(MP_QSTR_TCP_NODELAY), MP_OBJ_NEW_SMALL_INT(TCP_NODELAY) },
 };
 
 STATIC MP_DEFINE_CONST_DICT(mp_module_socket_globals, mp_module_socket_globals_table);
diff --git a/ports/esp32/moduos.c b/ports/esp32/moduos.c
index 9f0e291a..587e649e 100644
--- a/ports/esp32/moduos.c
+++ b/ports/esp32/moduos.c
@@ -36,10 +36,13 @@
 #include "py/objstr.h"
 #include "py/runtime.h"
 #include "py/mperrno.h"
+#include "py/stream.h"
 #include "extmod/vfs.h"
 #include "extmod/vfs_fat.h"
 #include "genhdr/mpversion.h"
 
+#include "vterm.h"
+
 extern const mp_obj_type_t mp_fat_vfs_type;
 
 STATIC const qstr os_uname_info_fields[] = {
@@ -84,23 +87,38 @@ STATIC mp_obj_t os_urandom(mp_obj_t num) {
 }
 STATIC MP_DEFINE_CONST_FUN_OBJ_1(os_urandom_obj, os_urandom);
 
-#if MICROPY_PY_OS_DUPTERM
-STATIC mp_obj_t os_dupterm_notify(mp_obj_t obj_in) {
-    (void)obj_in;
-    mp_hal_signal_dupterm_input();
-    return mp_const_none;
+STATIC mp_obj_t os_dupterm(size_t n_args, const mp_obj_t *args) {
+    STATIC mp_obj_t prev_stream;
+    mp_obj_t ret_stream = prev_stream;
+    if (args[0] == mp_const_none) {
+	prev_stream = mp_const_none;
+    } else if (args[0] == prev_stream) {
+	;
+    } else {
+	if (mp_get_stream_raise(args[0], MP_STREAM_OP_READ|MP_STREAM_OP_WRITE) != 0) {
+	    bool ret = false;
+	    prev_stream = args[0];
+	    mp_vterm_unregister();
+	    if (n_args == 3) {
+		mp_int_t thread_stack_size = mp_obj_get_int(args[2]);
+		if (thread_stack_size >= 0)
+		    ret = mp_vterm_register_dupterm(prev_stream, thread_stack_size);
+	    } else
+		ret = mp_vterm_register_dupterm_nonblocking(prev_stream);
+	    if (!ret) {
+		mp_raise_OSError(MP_EINVAL);
+	    }
+	}
+    }
+    return ret_stream;
 }
-STATIC MP_DEFINE_CONST_FUN_OBJ_1(os_dupterm_notify_obj, os_dupterm_notify);
-#endif
+STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(os_dupterm_obj, 1, 3, os_dupterm);
 
 STATIC const mp_rom_map_elem_t os_module_globals_table[] = {
     { MP_ROM_QSTR(MP_QSTR___name__), MP_ROM_QSTR(MP_QSTR_uos) },
     { MP_ROM_QSTR(MP_QSTR_uname), MP_ROM_PTR(&os_uname_obj) },
     { MP_ROM_QSTR(MP_QSTR_urandom), MP_ROM_PTR(&os_urandom_obj) },
-    #if MICROPY_PY_OS_DUPTERM
-    { MP_ROM_QSTR(MP_QSTR_dupterm), MP_ROM_PTR(&mp_uos_dupterm_obj) },
-    { MP_ROM_QSTR(MP_QSTR_dupterm_notify), MP_ROM_PTR(&os_dupterm_notify_obj) },
-    #endif
+    { MP_ROM_QSTR(MP_QSTR_dupterm), MP_ROM_PTR(&os_dupterm_obj) },
     #if MICROPY_VFS
     { MP_ROM_QSTR(MP_QSTR_ilistdir), MP_ROM_PTR(&mp_vfs_ilistdir_obj) },
     { MP_ROM_QSTR(MP_QSTR_listdir), MP_ROM_PTR(&mp_vfs_listdir_obj) },
diff --git a/ports/esp32/mpconfigport.h b/ports/esp32/mpconfigport.h
index 80594b11..9f440021 100644
--- a/ports/esp32/mpconfigport.h
+++ b/ports/esp32/mpconfigport.h
@@ -141,7 +141,9 @@
 #define MICROPY_SSL_MBEDTLS                 (1)
 #define MICROPY_PY_USSL_FINALISER           (1)
 #define MICROPY_PY_WEBSOCKET                (1)
+#define MICROPY_PY_WEBREPL		    (1)
 #define MICROPY_PY_FRAMEBUF                 (1)
+#define MICROPY_PY_GENSTREAM		    (1)
 
 // fatfs configuration
 #define MICROPY_FATFS_ENABLE_LFN            (1)
diff --git a/ports/esp32/mphalport.c b/ports/esp32/mphalport.c
index e588fc65..89eb0f69 100644
--- a/ports/esp32/mphalport.c
+++ b/ports/esp32/mphalport.c
@@ -27,6 +27,7 @@
  */
 
 #include <stdio.h>
+#include <string.h>
 #include <sys/time.h>
 
 #include "freertos/FreeRTOS.h"
@@ -42,12 +43,38 @@
 STATIC uint8_t stdin_ringbuf_array[256];
 ringbuf_t stdin_ringbuf = {stdin_ringbuf_array, sizeof(stdin_ringbuf_array)};
 
+static int noop_stdin_rx_chr(void)
+{
+    return -1;
+}
+
+static void noop_stdout_tx_strn(const char *str, uint32_t len)
+{
+}
+
+static int (*dup_stdin_rx_chr)(void) = noop_stdin_rx_chr;
+static void (*dup_stdout_tx_strn)(const char *str, uint32_t len) = noop_stdout_tx_strn;
+
+void mp_hal_stdin_dup(int (*rx_chr)(void))
+{
+    dup_stdin_rx_chr = rx_chr ? rx_chr : noop_stdin_rx_chr;
+}
+
+void mp_hal_stdout_dup(void (*tx_strn)(const char *str, uint32_t len))
+{
+    dup_stdout_tx_strn = tx_strn ? tx_strn : noop_stdout_tx_strn;
+}
+
 int mp_hal_stdin_rx_chr(void) {
     for (;;) {
         int c = ringbuf_get(&stdin_ringbuf);
         if (c != -1) {
             return c;
         }
+	c = dup_stdin_rx_chr();
+        if (c != -1) {
+            return c;
+        }
         MICROPY_EVENT_POLL_HOOK
         vTaskDelay(1);
     }
@@ -55,11 +82,11 @@ int mp_hal_stdin_rx_chr(void) {
 
 void mp_hal_stdout_tx_char(char c) {
     uart_tx_one_char(c);
-    //mp_uos_dupterm_tx_strn(&c, 1);
 }
 
 void mp_hal_stdout_tx_str(const char *str) {
     MP_THREAD_GIL_EXIT();
+    dup_stdout_tx_strn(str, strlen(str));
     while (*str) {
         mp_hal_stdout_tx_char(*str++);
     }
@@ -68,6 +95,7 @@ void mp_hal_stdout_tx_str(const char *str) {
 
 void mp_hal_stdout_tx_strn(const char *str, uint32_t len) {
     MP_THREAD_GIL_EXIT();
+    dup_stdout_tx_strn(str, len);
     while (len--) {
         mp_hal_stdout_tx_char(*str++);
     }
@@ -75,13 +103,19 @@ void mp_hal_stdout_tx_strn(const char *str, uint32_t len) {
 }
 
 void mp_hal_stdout_tx_strn_cooked(const char *str, uint32_t len) {
+    const char *p = str;
+    const char cr = '\r';
     MP_THREAD_GIL_EXIT();
     while (len--) {
         if (*str == '\n') {
-            mp_hal_stdout_tx_char('\r');
+	    dup_stdout_tx_strn(p, str - p);
+	    dup_stdout_tx_strn(&cr, 1);
+	    p = str;
+            mp_hal_stdout_tx_char(cr);
         }
         mp_hal_stdout_tx_char(*str++);
     }
+    dup_stdout_tx_strn(p, str - p);
     MP_THREAD_GIL_ENTER();
 }
 
diff --git a/ports/esp32/mphalport.h b/ports/esp32/mphalport.h
index 3215bc06..0811f2af 100644
--- a/ports/esp32/mphalport.h
+++ b/ports/esp32/mphalport.h
@@ -34,6 +34,9 @@
 
 extern ringbuf_t stdin_ringbuf;
 
+void mp_hal_stdin_dup(int (*rx_chr)(void));
+void mp_hal_stdout_dup(void (*tx_strn)(const char *str, uint32_t len));
+
 uint32_t mp_hal_ticks_us(void);
 __attribute__((always_inline)) static inline uint32_t mp_hal_ticks_cpu(void) {
   uint32_t ccount;
diff --git a/ports/esp32/mpthreadport.c b/ports/esp32/mpthreadport.c
index 76d9431c..54b324ff 100644
--- a/ports/esp32/mpthreadport.c
+++ b/ports/esp32/mpthreadport.c
@@ -37,8 +37,8 @@
 
 #if MICROPY_PY_THREAD
 
-#define MP_THREAD_MIN_STACK_SIZE                        (4 * 1024)
-#define MP_THREAD_DEFAULT_STACK_SIZE                    (MP_THREAD_MIN_STACK_SIZE + 1024)
+#define MP_THREAD_MIN_STACK_SIZE                        (1 * 1024)
+#define MP_THREAD_DEFAULT_STACK_SIZE                    (5 * 1024)
 #define MP_THREAD_PRIORITY                              (ESP_TASK_PRIO_MIN + 1)
 
 // this structure forms a linked list, one node per active thread
diff --git a/ports/esp32/sdkconfig.h b/ports/esp32/sdkconfig.h
index 113c0395..2bf86363 100644
--- a/ports/esp32/sdkconfig.h
+++ b/ports/esp32/sdkconfig.h
@@ -112,7 +112,7 @@
 #define CONFIG_LWIP_DHCPS_LEASE_UNIT 60
 #define CONFIG_LWIP_DHCPS_MAX_STATION_NUM 8
 #define CONFIG_LWIP_MAX_ACTIVE_TCP 16
-#define CONFIG_LWIP_MAX_SOCKETS 8
+#define CONFIG_LWIP_MAX_SOCKETS 12
 #define CONFIG_LWIP_SO_REUSE 1
 #define CONFIG_LWIP_ETHARP_TRUST_IP_MAC 1
 #define CONFIG_IP_LOST_TIMER_INTERVAL 120
diff --git a/py/builtin.h b/py/builtin.h
index 84b99a8a..9c566b4f 100644
--- a/py/builtin.h
+++ b/py/builtin.h
@@ -115,6 +115,7 @@ extern const mp_obj_module_t mp_module_machine;
 extern const mp_obj_module_t mp_module_lwip;
 extern const mp_obj_module_t mp_module_websocket;
 extern const mp_obj_module_t mp_module_webrepl;
+extern const mp_obj_module_t mp_module_genstream;
 extern const mp_obj_module_t mp_module_framebuf;
 extern const mp_obj_module_t mp_module_btree;
 
diff --git a/py/mpconfig.h b/py/mpconfig.h
index 532b54ab..cf23f5b4 100644
--- a/py/mpconfig.h
+++ b/py/mpconfig.h
@@ -1182,6 +1182,10 @@ typedef double mp_float_t;
 #define MICROPY_PY_FRAMEBUF (0)
 #endif
 
+#ifndef MICROPY_PY_GENSTREAM
+#define MICROPY_PY_GENSTREAM (0)
+#endif
+
 #ifndef MICROPY_PY_BTREE
 #define MICROPY_PY_BTREE (0)
 #endif
diff --git a/py/objmodule.c b/py/objmodule.c
index c4aba3a7..883ffd59 100644
--- a/py/objmodule.c
+++ b/py/objmodule.c
@@ -214,6 +214,9 @@ STATIC const mp_rom_map_elem_t mp_builtin_module_table[] = {
 #if MICROPY_PY_WEBREPL
     { MP_ROM_QSTR(MP_QSTR__webrepl), MP_ROM_PTR(&mp_module_webrepl) },
 #endif
+#if MICROPY_PY_GENSTREAM
+    { MP_ROM_QSTR(MP_QSTR_genstream), MP_ROM_PTR(&mp_module_genstream) },
+#endif
 #if MICROPY_PY_FRAMEBUF
     { MP_ROM_QSTR(MP_QSTR_framebuf), MP_ROM_PTR(&mp_module_framebuf) },
 #endif
diff --git a/py/py.mk b/py/py.mk
index 7c4cf82d..a11ebce5 100644
--- a/py/py.mk
+++ b/py/py.mk
@@ -238,6 +238,7 @@ PY_EXTMOD_O_BASENAME = \
 	extmod/moduselect.o \
 	extmod/modwebsocket.o \
 	extmod/modwebrepl.o \
+	extmod/modgenstream.o \
 	extmod/modframebuf.o \
 	extmod/vfs.o \
 	extmod/vfs_reader.o \
